declare module ToTypeScriptD.Native {

    export class AsyncClass {
        constructor();
        getStringAsync(value: string): ToTypeScriptD.WinRT.IPromise<string>;
    }

    export class ClassWithEventHandler {
        addEventListener(type: string, listener: EventListener): void;
        removeEventListener(type: string, listener: EventListener): void;
        onsomethinghappened(ev: any);
        constructor();
        doSomething(): void;
    }

    export class CXReturnTypes {
        constructor();
        getString(): string;
        getInt32(): number;
        getUInt32(): number;
        getGuid(): string;
        getByte(): number;
        getBytes(): any;
        getBoolean(): boolean;
        methodWithSomeOutParameters(in1: number, in2: string): CXReturnTypes_methodWithSomeOutParameters_OUT;
        methodWithSomeOutParametersButVoidResult(in1: number, in2: string): CXReturnTypes_methodWithSomeOutParametersButVoidResult_OUT;
    }

    interface CXReturnTypes_methodWithSomeOutParameters_OUT {
        __returnValue: number;
        out1: number;
        out2: string;
        out3: number[];
    }

    interface CXReturnTypes_methodWithSomeOutParametersButVoidResult_OUT {
        out1: number;
        out2: string;
        out3: number[];
    }

    enum SampleEnum {
        a,
        b,
        c,
        d
    }

    export class SampleEnumClass {
        constructor();
        methowWithEnumParameter(value: ToTypeScriptD.Native.SampleEnum): ToTypeScriptD.Native.SampleEnum;
    }

    enum SampleEnumNumbered {
        a,
        b,
        d,
        c
    }

    export class SomethingHappenedEventHandler {
        constructor(__param0: any, __param1: number);
        invoke(__param0: ToTypeScriptD.Native.ClassWithEventHandler, __param1: string): void;
    }

}
