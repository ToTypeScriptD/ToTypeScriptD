declare module ToTypeScriptD.TestAssembly.CSharp {

    export class CrazyAmountOfNestedClasses {
        constructor();
    }

    export class CrazyAmountOfNestedClasses_C1 {
        constructor();
    }

    export class CrazyAmountOfNestedClasses_C1_C2 {
        constructor();
    }

    export class CrazyAmountOfNestedClasses_C1_C2_C3 {
        constructor();
    }

    export class CrazyAmountOfNestedClasses_C1_C2_C3_C4 {
        constructor();
    }

    export class CrazyAmountOfNestedClasses_C1_C2_C3_C4_C5 {
        constructor();
    }

    export class CrazyAmountOfNestedClasses_C1_C2_C3_C4_C5_WAT {
        static takesANestedParam(wat: ToTypeScriptD.TestAssembly.CSharp.CrazyAmountOfNestedClasses_C1_C2_C3_C4_C5_WAT): void;
        constructor();
    }

    export class GenericClass<T> {
        getItem(input: T): T;
        constructor();
    }

    export class GenericClassIsGettingALittleCrazy<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterfaceButGeneric3<T>> {
        constructor();
    }

    export class GenericClassWith<T, K> {
        getSomething(inT: T, inK: K): GenericClassWith_getSomething_OUT<T, K>;
        constructor();
    }

    interface GenericClassWith_getSomething_OUT<T, K> {
        outParam1: ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface3<T,K>;
    }

    export class GenericClassWithConstraint<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface> {
        getItem(item: T): T;
        constructor();
    }

    export class GenericClassWithMultipleTypesConstrained<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface, K extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface> {
        getItemK(item: K): K;
        getItemT(item: T): T;
        constructor();
    }

    export class GenericClassWithOneTypeConstraintMultipleTimes<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface /*TODO:, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface1, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface2, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface3<T,K>*/, K> {
        getItemT(item: T): T;
        constructor();
    }

    export interface IAmAnInterface {
        someProperty: string;
        nullableProperty?: number;
        getNothing(): void;
        loadAsync(): System.Threading.Tasks.Task<number>;
    }

    export interface IAmAnotherInterface1 {
    }

    export interface IAmAnotherInterface2 {
    }

    export interface IAmAnotherInterface3<T, K> {
    }

    export interface IAmAnotherInterfaceButGeneric1<T> {
    }

    export interface IAmAnotherInterfaceButGeneric2<T> {
    }

    export interface IAmAnotherInterfaceButGeneric3<T> extends ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterfaceButGeneric1<T>, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterfaceButGeneric2<T> {
    }

    export class SomeClass implements ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface {
        someProperty: string;
        nullableProperty?: number;
        getNothing(): void;
        loadAsync(): System.Threading.Tasks.Task<number>;
        methodWithNullableParameter(p1?: number): void;
        methodThatTakesNestedValueTypeAsNullable(nullableEnum?: ToTypeScriptD.TestAssembly.CSharp.SomeClass_NestedEnumValueType): void;
        constructor();
    }

    enum SomeClass_NestedEnumValueType {
        a,
        b,
        c
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample.Sample.SubSample {

    export class TestClassB {
        static go(): void;
        constructor();
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample.Sample {

    export class TestClassA {
        static go(): void;
        constructor();
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample.Sample2 {

    export class TestClassC {
        static go(): void;
        constructor();
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample {

    export class TestClass {
        static go(): void;
        constructor();
    }

}
