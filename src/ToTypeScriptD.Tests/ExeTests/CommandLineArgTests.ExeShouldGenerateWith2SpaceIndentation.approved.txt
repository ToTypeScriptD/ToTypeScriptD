//****************************************************************
//  Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       v0.0.0000.0000 SHA1:0000000 - Debug
//  Date:          mm/dd/YYYY H:MM:SS PM
//
//  Assemblies:
//    ToTypeScriptD.Native.winmd
//
//****************************************************************




/*
 * This TypeScript definition file contains some core WinRT type 
 * definitions that the TypeScriptD output may need for things like async etc.
 *
 * Include this definition with the rest of your *.d.ts includes.
 *
 */


declare module ToTypeScriptD.WinRT {
  export interface IPromise<TResult> {
    then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
    cancel(): void;

    //operation: Windows.Foundation.IAsyncOperation<T>;
  }
}



declare module ToTypeScriptD.Native {

  export class AsyncClass {
    constructor();
    getStringAsync(value: string): Windows.Foundation.IAsyncOperation<string>;
  }

  export class ClassWithEventHandler {
    constructor();
    doSomething(): void;
    doSomethingTyped(): void;
    // Events
    addEventListener(eventName: string, listener: any): void;
    removeEventListener(eventName: string, listener: any): void;
    addEventListener(eventName: "somethinghappened", listener: ToTypeScriptD.Native.SomethingHappenedEventHandler): void;
    removeEventListener(eventName: "somethinghappened", listener: ToTypeScriptD.Native.SomethingHappenedEventHandler): void;
    onsomethinghappened: (ev: ToTypeScriptD.Native.SomethingHappenedEventHandler) => void;
    addEventListener(eventName: "sampletyped", listener: Windows.Foundation.TypedEventHandler<ToTypeScriptD.Native.ClassWithEventHandler,ToTypeScriptD.Native.SampleEnum>): void;
    removeEventListener(eventName: "sampletyped", listener: Windows.Foundation.TypedEventHandler<ToTypeScriptD.Native.ClassWithEventHandler,ToTypeScriptD.Native.SampleEnum>): void;
    onsampletyped: (ev: Windows.Foundation.TypedEventHandler<ToTypeScriptD.Native.ClassWithEventHandler,ToTypeScriptD.Native.SampleEnum>) => void;

  }

  export class CXReturnTypes {
    constructor();
    getString(): string;
    getInt32(): number;
    getUInt32(): number;
    getGuid(): string;
    getByte(): number;
    getBytes(): any;
    getBoolean(): boolean;
    methodWithSomeOutParameters(in1: number, in2: string): CXReturnTypes_methodWithSomeOutParameters_OUT;
    methodWithSomeOutParametersButVoidResult(in1: number, in2: string): CXReturnTypes_methodWithSomeOutParametersButVoidResult_OUT;
    overloadedMethodWithNumberTypeParams(value: number): string;
    getIterableOfInts(): Windows.Foundation.Collections.IIterable<number>;
  }

  interface CXReturnTypes_methodWithSomeOutParameters_OUT {
    __returnValue: number;
    out1: number;
    out2: string;
    out3: number[];
  }

  interface CXReturnTypes_methodWithSomeOutParametersButVoidResult_OUT {
    out1: number;
    out2: string;
    out3: number[];
  }

  enum SampleEnum {
    a,
    b,
    c,
    d
  }

  export class SampleEnumClass {
    constructor();
    methowWithEnumParameter(value: ToTypeScriptD.Native.SampleEnum): ToTypeScriptD.Native.SampleEnum;
  }

  enum SampleEnumNumbered {
    a,
    b,
    d,
    c
  }

  export interface SomethingHappenedEventHandler {
    target: ToTypeScriptD.Native.ClassWithEventHandler;
    detail: any[];
    type: string;
  }

}

