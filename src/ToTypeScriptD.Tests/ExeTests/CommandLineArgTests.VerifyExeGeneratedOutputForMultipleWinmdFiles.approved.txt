//****************************************************************
//  Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       v0.0.0000.0000 SHA1:0000000 - Debug
//  Date:          mm/dd/YYYY H:MM:SS PM
//
//  Assemblies:
//    Windows.Foundation.winmd
//    Windows.System.winmd
//
//****************************************************************



declare module Windows.Foundation {

    export interface AsyncActionCompletedHandler {
        target: Windows.Foundation.IAsyncAction;
        detail: any[];
        type: string;
    }

    export interface AsyncActionProgressHandler<TProgress> {
        target: Windows.Foundation.IAsyncActionWithProgress<TProgress>;
        detail: any[];
        type: string;
    }

    export interface AsyncActionWithProgressCompletedHandler<TProgress> {
        target: Windows.Foundation.IAsyncActionWithProgress<TProgress>;
        detail: any[];
        type: string;
    }

    export interface AsyncOperationCompletedHandler<TResult> {
        target: Windows.Foundation.IAsyncOperation<TResult>;
        detail: any[];
        type: string;
    }

    export interface AsyncOperationProgressHandler<TResult, TProgress> {
        target: Windows.Foundation.IAsyncOperationWithProgress<TResult,TProgress>;
        detail: any[];
        type: string;
    }

    export interface AsyncOperationWithProgressCompletedHandler<TResult, TProgress> {
        target: Windows.Foundation.IAsyncOperationWithProgress<TResult,TProgress>;
        detail: any[];
        type: string;
    }

    enum AsyncStatus {
        started,
        completed,
        canceled,
        error
    }

    export class DateTime {
        universalTime: number;
    }

    export interface EventHandler<T> {
        target: any;
        detail: any[];
        type: string;
    }

    export class EventRegistrationToken {
        value: number;
    }

    export class HResult {
        value: number;
    }

    export interface IAsyncAction extends Windows.Foundation.IAsyncInfo {
        getResults(): void;
        completed: Windows.Foundation.AsyncActionCompletedHandler;
    }

    export interface IAsyncActionWithProgress<TProgress> extends Windows.Foundation.IAsyncInfo {
        getResults(): void;
        progress: Windows.Foundation.AsyncActionProgressHandler<TProgress>;
        completed: Windows.Foundation.AsyncActionWithProgressCompletedHandler<TProgress>;
    }

    export interface IAsyncInfo {
        cancel(): void;
        close(): void;
        errorCode: Windows.Foundation.HResult;
        id: number;
        status: Windows.Foundation.AsyncStatus;
    }

    export interface IAsyncOperation<TResult> extends Windows.Foundation.IAsyncInfo {
        getResults(): TResult;
        completed: Windows.Foundation.AsyncOperationCompletedHandler<TResult>;

        // Promise Extension
        then<U>(success?: (value: TResult) => ToTypeScriptD.WinRT.IPromise<U>, error?: (error: any) => ToTypeScriptD.WinRT.IPromise<U>, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        then<U>(success?: (value: TResult) => ToTypeScriptD.WinRT.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        then<U>(success?: (value: TResult) => U, error?: (error: any) => ToTypeScriptD.WinRT.IPromise<U>, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
    }

    export interface IAsyncOperationWithProgress<TResult, TProgress> extends Windows.Foundation.IAsyncInfo {
        getResults(): TResult;
        progress: Windows.Foundation.AsyncOperationProgressHandler<TResult,TProgress>;
        completed: Windows.Foundation.AsyncOperationWithProgressCompletedHandler<TResult,TProgress>;

        // Promise Extension
        then<U>(success?: (value: TResult) => ToTypeScriptD.WinRT.IPromise<U>, error?: (error: any) => ToTypeScriptD.WinRT.IPromise<U>, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        then<U>(success?: (value: TResult) => ToTypeScriptD.WinRT.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        then<U>(success?: (value: TResult) => U, error?: (error: any) => ToTypeScriptD.WinRT.IPromise<U>, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): ToTypeScriptD.WinRT.IPromise<U>;
        done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
    }

    export interface IClosable {
        close(): void;
    }

    export interface IGetActivationFactory {
        getActivationFactory(activatableClassId: string): any;
    }

    export interface IPropertyValue {
        getUInt8(): number;
        getInt16(): number;
        getUInt16(): number;
        getInt32(): number;
        getUInt32(): number;
        getInt64(): number;
        getUInt64(): number;
        getSingle(): number;
        getDouble(): number;
        getChar16(): number;
        getBoolean(): boolean;
        getString(): string;
        getGuid(): string;
        getDateTime(): Date;
        getTimeSpan(): Windows.Foundation.TimeSpan;
        getPoint(): Windows.Foundation.Point;
        getSize(): Windows.Foundation.Size;
        getRect(): Windows.Foundation.Rect;
        getUInt8Array(): IPropertyValue_getUInt8Array_OUT;
        getInt16Array(): IPropertyValue_getInt16Array_OUT;
        getUInt16Array(): IPropertyValue_getUInt16Array_OUT;
        getInt32Array(): IPropertyValue_getInt32Array_OUT;
        getUInt32Array(): IPropertyValue_getUInt32Array_OUT;
        getInt64Array(): IPropertyValue_getInt64Array_OUT;
        getUInt64Array(): IPropertyValue_getUInt64Array_OUT;
        getSingleArray(): IPropertyValue_getSingleArray_OUT;
        getDoubleArray(): IPropertyValue_getDoubleArray_OUT;
        getChar16Array(): IPropertyValue_getChar16Array_OUT;
        getBooleanArray(): IPropertyValue_getBooleanArray_OUT;
        getStringArray(): IPropertyValue_getStringArray_OUT;
        getInspectableArray(): IPropertyValue_getInspectableArray_OUT;
        getGuidArray(): IPropertyValue_getGuidArray_OUT;
        getDateTimeArray(): IPropertyValue_getDateTimeArray_OUT;
        getTimeSpanArray(): IPropertyValue_getTimeSpanArray_OUT;
        getPointArray(): IPropertyValue_getPointArray_OUT;
        getSizeArray(): IPropertyValue_getSizeArray_OUT;
        getRectArray(): IPropertyValue_getRectArray_OUT;
        isNumericScalar: boolean;
        type: Windows.Foundation.PropertyType;
    }

    interface IPropertyValue_getUInt8Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getInt16Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getUInt16Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getInt32Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getUInt32Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getInt64Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getUInt64Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getSingleArray_OUT {
        value: number[];
    }

    interface IPropertyValue_getDoubleArray_OUT {
        value: number[];
    }

    interface IPropertyValue_getChar16Array_OUT {
        value: number[];
    }

    interface IPropertyValue_getBooleanArray_OUT {
        value: boolean[];
    }

    interface IPropertyValue_getStringArray_OUT {
        value: string[];
    }

    interface IPropertyValue_getInspectableArray_OUT {
        value: any[];
    }

    interface IPropertyValue_getGuidArray_OUT {
        value: string[];
    }

    interface IPropertyValue_getDateTimeArray_OUT {
        value: Date[];
    }

    interface IPropertyValue_getTimeSpanArray_OUT {
        value: Windows.Foundation.TimeSpan[];
    }

    interface IPropertyValue_getPointArray_OUT {
        value: Windows.Foundation.Point[];
    }

    interface IPropertyValue_getSizeArray_OUT {
        value: Windows.Foundation.Size[];
    }

    interface IPropertyValue_getRectArray_OUT {
        value: Windows.Foundation.Rect[];
    }

    export interface IReference<T> extends Windows.Foundation.IPropertyValue {
        value: T;
    }

    export interface IReferenceArray<T> extends Windows.Foundation.IPropertyValue {
        value: T[];
    }

    export interface IUriRuntimeClass {
        equals(pUri: Windows.Foundation.Uri): boolean;
        combineUri(relativeUri: string): Windows.Foundation.Uri;
        absoluteUri: string;
        displayUri: string;
        domain: string;
        extension: string;
        fragment: string;
        host: string;
        password: string;
        path: string;
        port: number;
        query: string;
        queryParsed: Windows.Foundation.WwwFormUrlDecoder;
        rawUri: string;
        schemeName: string;
        suspicious: boolean;
        userName: string;
    }

    export interface IUriRuntimeClassWithAbsoluteCanonicalUri {
        absoluteCanonicalUri: string;
        displayIri: string;
    }

    export interface IWwwFormUrlDecoderEntry {
        name: string;
        value: string;
    }

    export interface IWwwFormUrlDecoderRuntimeClass extends Windows.Foundation.Collections.IIterable<Windows.Foundation.IWwwFormUrlDecoderEntry>, Windows.Foundation.Collections.IVectorView<Windows.Foundation.IWwwFormUrlDecoderEntry> {
        getFirstValueByName(name: string): string;

        // Array.prototype extensions
        toString(): string;
        toLocaleString(): string;
        concat(...items: Windows.Foundation.IWwwFormUrlDecoderEntry[][]): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        join(seperator: string): string;
        pop(): Windows.Foundation.IWwwFormUrlDecoderEntry;
        push(...items: Windows.Foundation.IWwwFormUrlDecoderEntry[]): void;
        reverse(): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        shift(): Windows.Foundation.IWwwFormUrlDecoderEntry;
        slice(start: number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        slice(start: number, end: number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        sort(): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        sort(compareFn: (a: Windows.Foundation.IWwwFormUrlDecoderEntry, b: Windows.Foundation.IWwwFormUrlDecoderEntry) => number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        splice(start: number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        splice(start: number, deleteCount: number, ...items: Windows.Foundation.IWwwFormUrlDecoderEntry[]): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        unshift(...items: Windows.Foundation.IWwwFormUrlDecoderEntry[]): number;
        lastIndexOf(searchElement: Windows.Foundation.IWwwFormUrlDecoderEntry): number;
        lastIndexOf(searchElement: Windows.Foundation.IWwwFormUrlDecoderEntry, fromIndex: number): number;
        every(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean): boolean;
        every(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean, thisArg: any): boolean;
        some(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean): boolean;
        some(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean, thisArg: any): boolean;
        forEach(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => void ): void;
        forEach(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => void , thisArg: any): void;
        map(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any): any[];
        map(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any, thisArg: any): any[];
        filter(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        filter(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean, thisArg: any): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any): any;
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any, initialValue: any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any, initialValue: any): any;
        length: number;
    }

    export class Point {
        x: number;
        y: number;
    }

    enum PropertyType {
        empty,
        uInt8,
        int16,
        uInt16,
        int32,
        uInt32,
        int64,
        uInt64,
        single,
        double,
        char16,
        boolean,
        string,
        inspectable,
        dateTime,
        timeSpan,
        guid,
        point,
        size,
        rect,
        otherType,
        uInt8Array,
        int16Array,
        uInt16Array,
        int32Array,
        uInt32Array,
        int64Array,
        uInt64Array,
        singleArray,
        doubleArray,
        char16Array,
        booleanArray,
        stringArray,
        inspectableArray,
        dateTimeArray,
        timeSpanArray,
        guidArray,
        pointArray,
        sizeArray,
        rectArray,
        otherTypeArray
    }

    export class PropertyValue {
        static createEmpty(): any;
        static createUInt8(value: number): any;
        static createInt16(value: number): any;
        static createUInt16(value: number): any;
        static createInt32(value: number): any;
        static createUInt32(value: number): any;
        static createInt64(value: number): any;
        static createUInt64(value: number): any;
        static createSingle(value: number): any;
        static createDouble(value: number): any;
        static createChar16(value: number): any;
        static createBoolean(value: boolean): any;
        static createString(value: string): any;
        static createInspectable(value: any): any;
        static createGuid(value: string): any;
        static createDateTime(value: Date): any;
        static createTimeSpan(value: Windows.Foundation.TimeSpan): any;
        static createPoint(value: Windows.Foundation.Point): any;
        static createSize(value: Windows.Foundation.Size): any;
        static createRect(value: Windows.Foundation.Rect): any;
        static createUInt8Array(value: any): any;
        static createInt16Array(value: number[]): any;
        static createUInt16Array(value: number[]): any;
        static createInt32Array(value: number[]): any;
        static createUInt32Array(value: number[]): any;
        static createInt64Array(value: number[]): any;
        static createUInt64Array(value: number[]): any;
        static createSingleArray(value: number[]): any;
        static createDoubleArray(value: number[]): any;
        static createChar16Array(value: number[]): any;
        static createBooleanArray(value: boolean[]): any;
        static createStringArray(value: string[]): any;
        static createInspectableArray(value: any[]): any;
        static createGuidArray(value: string[]): any;
        static createDateTimeArray(value: Date[]): any;
        static createTimeSpanArray(value: Windows.Foundation.TimeSpan[]): any;
        static createPointArray(value: Windows.Foundation.Point[]): any;
        static createSizeArray(value: Windows.Foundation.Size[]): any;
        static createRectArray(value: Windows.Foundation.Rect[]): any;
    }

    export class Rect {
        x: number;
        y: number;
        width: number;
        height: number;
    }

    export class Size {
        width: number;
        height: number;
    }

    export class TimeSpan {
        duration: number;
    }

    export interface TypedEventHandler<TSender, TResult> {
        target: TSender;
        detail: any[];
        type: string;
    }

    export class Uri implements Windows.Foundation.IUriRuntimeClass, Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri {
        constructor(uri: string);
        constructor(baseUri: string, relativeUri: string);
        equals(pUri: Windows.Foundation.Uri): boolean;
        combineUri(relativeUri: string): Windows.Foundation.Uri;
        static unescapeComponent(toUnescape: string): string;
        static escapeComponent(toEscape: string): string;
        absoluteUri: string;
        displayUri: string;
        domain: string;
        extension: string;
        fragment: string;
        host: string;
        password: string;
        path: string;
        port: number;
        query: string;
        queryParsed: Windows.Foundation.WwwFormUrlDecoder;
        rawUri: string;
        schemeName: string;
        suspicious: boolean;
        userName: string;
        absoluteCanonicalUri: string;
        displayIri: string;
    }

    export class WwwFormUrlDecoder implements Windows.Foundation.IWwwFormUrlDecoderRuntimeClass, Windows.Foundation.Collections.IIterable<Windows.Foundation.IWwwFormUrlDecoderEntry>, Windows.Foundation.Collections.IVectorView<Windows.Foundation.IWwwFormUrlDecoderEntry> {
        constructor(query: string);
        getFirstValueByName(name: string): string;
        first(): Windows.Foundation.Collections.IIterator<Windows.Foundation.IWwwFormUrlDecoderEntry>;
        getAt(index: number): Windows.Foundation.IWwwFormUrlDecoderEntry;
        indexOf(value: Windows.Foundation.IWwwFormUrlDecoderEntry): WwwFormUrlDecoder_indexOf_OUT;
        getMany(startIndex: number): WwwFormUrlDecoder_getMany_OUT;
        size: number;

        // Array.prototype extensions
        toString(): string;
        toLocaleString(): string;
        concat(...items: Windows.Foundation.IWwwFormUrlDecoderEntry[][]): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        join(seperator: string): string;
        pop(): Windows.Foundation.IWwwFormUrlDecoderEntry;
        push(...items: Windows.Foundation.IWwwFormUrlDecoderEntry[]): void;
        reverse(): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        shift(): Windows.Foundation.IWwwFormUrlDecoderEntry;
        slice(start: number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        slice(start: number, end: number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        sort(): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        sort(compareFn: (a: Windows.Foundation.IWwwFormUrlDecoderEntry, b: Windows.Foundation.IWwwFormUrlDecoderEntry) => number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        splice(start: number): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        splice(start: number, deleteCount: number, ...items: Windows.Foundation.IWwwFormUrlDecoderEntry[]): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        unshift(...items: Windows.Foundation.IWwwFormUrlDecoderEntry[]): number;
        lastIndexOf(searchElement: Windows.Foundation.IWwwFormUrlDecoderEntry): number;
        lastIndexOf(searchElement: Windows.Foundation.IWwwFormUrlDecoderEntry, fromIndex: number): number;
        every(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean): boolean;
        every(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean, thisArg: any): boolean;
        some(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean): boolean;
        some(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean, thisArg: any): boolean;
        forEach(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => void ): void;
        forEach(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => void , thisArg: any): void;
        map(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any): any[];
        map(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any, thisArg: any): any[];
        filter(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        filter(callbackfn: (value: Windows.Foundation.IWwwFormUrlDecoderEntry, index: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => boolean, thisArg: any): Windows.Foundation.IWwwFormUrlDecoderEntry[];
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any): any;
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any, initialValue: any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: Windows.Foundation.IWwwFormUrlDecoderEntry[]) => any, initialValue: any): any;
        length: number;
    }

    interface WwwFormUrlDecoder_indexOf_OUT {
        __returnValue: boolean;
        index: number;
    }

    interface WwwFormUrlDecoder_getMany_OUT {
        __returnValue: number;
        items: Windows.Foundation.IWwwFormUrlDecoderEntry[];
    }

}
declare module Windows.Foundation.Collections {

    enum CollectionChange {
        reset,
        itemInserted,
        itemRemoved,
        itemChanged
    }

    export interface IIterable<T> {
        first(): Windows.Foundation.Collections.IIterator<T>;
    }

    export interface IIterator<T> {
        moveNext(): boolean;
        getMany(): IIterator_getMany_OUT<T>;
        current: T;
        hasCurrent: boolean;
    }

    interface IIterator_getMany_OUT<T> {
        __returnValue: number;
        items: T[];
    }

    export interface IKeyValuePair<K, V> {
        key: K;
        value: V;
    }

    export interface IMap<K, V> extends Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<K,V>> {
        lookup(key: K): V;
        hasKey(key: K): boolean;
        getView(): Windows.Foundation.Collections.IMapView<K,V>;
        insert(key: K, value: V): boolean;
        remove(key: K): void;
        clear(): void;
        size: number;
    }

    export interface IMapChangedEventArgs<K> {
        collectionChange: Windows.Foundation.Collections.CollectionChange;
        key: K;
    }

    export interface IMapView<K, V> extends Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<K,V>> {
        lookup(key: K): V;
        hasKey(key: K): boolean;
        split(): IMapView_split_OUT<K, V>;
        size: number;
    }

    interface IMapView_split_OUT<K, V> {
        first: Windows.Foundation.Collections.IMapView<K,V>;
        second: Windows.Foundation.Collections.IMapView<K,V>;
    }

    export interface IObservableMap<K, V> extends Windows.Foundation.Collections.IMap<K,V> {
        // Events
        addEventListener(eventName: string, listener: any): void;
        removeEventListener(eventName: string, listener: any): void;
        addEventListener(eventName: "mapchanged", listener: Windows.Foundation.Collections.MapChangedEventHandler<K,V>): void;
        removeEventListener(eventName: "mapchanged", listener: Windows.Foundation.Collections.MapChangedEventHandler<K,V>): void;
        onmapchanged: (ev: Windows.Foundation.Collections.MapChangedEventHandler<K,V>) => void;

    }

    export interface IObservableVector<T> extends Windows.Foundation.Collections.IVector<T> {
        // Events
        addEventListener(eventName: string, listener: any): void;
        removeEventListener(eventName: string, listener: any): void;
        addEventListener(eventName: "vectorchanged", listener: Windows.Foundation.Collections.VectorChangedEventHandler<T>): void;
        removeEventListener(eventName: "vectorchanged", listener: Windows.Foundation.Collections.VectorChangedEventHandler<T>): void;
        onvectorchanged: (ev: Windows.Foundation.Collections.VectorChangedEventHandler<T>) => void;


        // Array.prototype extensions
        toString(): string;
        toLocaleString(): string;
        concat(...items: T[][]): T[];
        join(seperator: string): string;
        pop(): T;
        push(...items: T[]): void;
        reverse(): T[];
        shift(): T;
        slice(start: number): T[];
        slice(start: number, end: number): T[];
        sort(): T[];
        sort(compareFn: (a: T, b: T) => number): T[];
        splice(start: number): T[];
        splice(start: number, deleteCount: number, ...items: T[]): T[];
        unshift(...items: T[]): number;
        lastIndexOf(searchElement: T): number;
        lastIndexOf(searchElement: T, fromIndex: number): number;
        every(callbackfn: (value: T, index: number, array: T[]) => boolean): boolean;
        every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): boolean;
        some(callbackfn: (value: T, index: number, array: T[]) => boolean): boolean;
        some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): boolean;
        forEach(callbackfn: (value: T, index: number, array: T[]) => void ): void;
        forEach(callbackfn: (value: T, index: number, array: T[]) => void , thisArg: any): void;
        map(callbackfn: (value: T, index: number, array: T[]) => any): any[];
        map(callbackfn: (value: T, index: number, array: T[]) => any, thisArg: any): any[];
        filter(callbackfn: (value: T, index: number, array: T[]) => boolean): T[];
        filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): T[];
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any): any;
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any, initialValue: any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any, initialValue: any): any;
        length: number;
    }

    export interface IPropertySet extends Windows.Foundation.Collections.IObservableMap<string,any>, Windows.Foundation.Collections.IMap<string,any>, Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<string,any>> {
    }

    export interface IVector<T> extends Windows.Foundation.Collections.IIterable<T> {
        getAt(index: number): T;
        getView(): Windows.Foundation.Collections.IVectorView<T>;
        indexOf(value: T): IVector_indexOf_OUT<T>;
        setAt(index: number, value: T): void;
        insertAt(index: number, value: T): void;
        removeAt(index: number): void;
        append(value: T): void;
        removeAtEnd(): void;
        clear(): void;
        getMany(startIndex: number): IVector_getMany_OUT<T>;
        replaceAll(items: T[]): void;
        size: number;

        // Array.prototype extensions
        toString(): string;
        toLocaleString(): string;
        concat(...items: T[][]): T[];
        join(seperator: string): string;
        pop(): T;
        push(...items: T[]): void;
        reverse(): T[];
        shift(): T;
        slice(start: number): T[];
        slice(start: number, end: number): T[];
        sort(): T[];
        sort(compareFn: (a: T, b: T) => number): T[];
        splice(start: number): T[];
        splice(start: number, deleteCount: number, ...items: T[]): T[];
        unshift(...items: T[]): number;
        lastIndexOf(searchElement: T): number;
        lastIndexOf(searchElement: T, fromIndex: number): number;
        every(callbackfn: (value: T, index: number, array: T[]) => boolean): boolean;
        every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): boolean;
        some(callbackfn: (value: T, index: number, array: T[]) => boolean): boolean;
        some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): boolean;
        forEach(callbackfn: (value: T, index: number, array: T[]) => void ): void;
        forEach(callbackfn: (value: T, index: number, array: T[]) => void , thisArg: any): void;
        map(callbackfn: (value: T, index: number, array: T[]) => any): any[];
        map(callbackfn: (value: T, index: number, array: T[]) => any, thisArg: any): any[];
        filter(callbackfn: (value: T, index: number, array: T[]) => boolean): T[];
        filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): T[];
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any): any;
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any, initialValue: any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any, initialValue: any): any;
        length: number;
    }

    interface IVector_indexOf_OUT<T> {
        __returnValue: boolean;
        index: number;
    }

    interface IVector_getMany_OUT<T> {
        __returnValue: number;
        items: T[];
    }

    export interface IVectorChangedEventArgs {
        collectionChange: Windows.Foundation.Collections.CollectionChange;
        index: number;
    }

    export interface IVectorView<T> extends Windows.Foundation.Collections.IIterable<T> {
        getAt(index: number): T;
        indexOf(value: T): IVectorView_indexOf_OUT<T>;
        getMany(startIndex: number): IVectorView_getMany_OUT<T>;
        size: number;

        // Array.prototype extensions
        toString(): string;
        toLocaleString(): string;
        concat(...items: T[][]): T[];
        join(seperator: string): string;
        pop(): T;
        push(...items: T[]): void;
        reverse(): T[];
        shift(): T;
        slice(start: number): T[];
        slice(start: number, end: number): T[];
        sort(): T[];
        sort(compareFn: (a: T, b: T) => number): T[];
        splice(start: number): T[];
        splice(start: number, deleteCount: number, ...items: T[]): T[];
        unshift(...items: T[]): number;
        lastIndexOf(searchElement: T): number;
        lastIndexOf(searchElement: T, fromIndex: number): number;
        every(callbackfn: (value: T, index: number, array: T[]) => boolean): boolean;
        every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): boolean;
        some(callbackfn: (value: T, index: number, array: T[]) => boolean): boolean;
        some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): boolean;
        forEach(callbackfn: (value: T, index: number, array: T[]) => void ): void;
        forEach(callbackfn: (value: T, index: number, array: T[]) => void , thisArg: any): void;
        map(callbackfn: (value: T, index: number, array: T[]) => any): any[];
        map(callbackfn: (value: T, index: number, array: T[]) => any, thisArg: any): any[];
        filter(callbackfn: (value: T, index: number, array: T[]) => boolean): T[];
        filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg: any): T[];
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any): any;
        reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any, initialValue: any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any): any;
        reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: T[]) => any, initialValue: any): any;
        length: number;
    }

    interface IVectorView_indexOf_OUT<T> {
        __returnValue: boolean;
        index: number;
    }

    interface IVectorView_getMany_OUT<T> {
        __returnValue: number;
        items: T[];
    }

    export interface MapChangedEventHandler<K, V> {
        target: Windows.Foundation.Collections.IObservableMap<K,V>;
        detail: any[];
        type: string;
    }

    export class PropertySet implements Windows.Foundation.Collections.IPropertySet, Windows.Foundation.Collections.IObservableMap<string,any>, Windows.Foundation.Collections.IMap<string,any>, Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<string,any>> {
        constructor();
        lookup(key: string): any;
        hasKey(key: string): boolean;
        getView(): Windows.Foundation.Collections.IMapView<string,any>;
        insert(key: string, value: any): boolean;
        remove(key: string): void;
        clear(): void;
        first(): Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IKeyValuePair<string,any>>;
        size: number;
        // Events
        addEventListener(eventName: string, listener: any): void;
        removeEventListener(eventName: string, listener: any): void;
        addEventListener(eventName: "mapchanged", listener: Windows.Foundation.Collections.MapChangedEventHandler<string,any>): void;
        removeEventListener(eventName: "mapchanged", listener: Windows.Foundation.Collections.MapChangedEventHandler<string,any>): void;
        onmapchanged: (ev: Windows.Foundation.Collections.MapChangedEventHandler<string,any>) => void;

    }

    export interface VectorChangedEventHandler<T> {
        target: Windows.Foundation.Collections.IObservableVector<T>;
        detail: any[];
        type: string;
    }

}
declare module Windows.Foundation.Diagnostics {

    enum ErrorOptions {
        none,
        suppressExceptions,
        forceExceptions,
        useSetErrorInfo,
        suppressSetErrorInfo
    }

    export interface IErrorReportingSettings {
        setErrorOptions(value: Windows.Foundation.Diagnostics.ErrorOptions): void;
        getErrorOptions(): Windows.Foundation.Diagnostics.ErrorOptions;
    }

    export class RuntimeBrokerErrorSettings implements Windows.Foundation.Diagnostics.IErrorReportingSettings {
        constructor();
        setErrorOptions(value: Windows.Foundation.Diagnostics.ErrorOptions): void;
        getErrorOptions(): Windows.Foundation.Diagnostics.ErrorOptions;
    }

}
declare module Windows.Foundation.Metadata {

    export class ActivatableAttribute {
        constructor(version: number);
        constructor(type: string /*System.Type?*/, version: number);
    }

    export class AllowMultipleAttribute {
        constructor();
    }

    enum AttributeTargets {
        delegate,
        enum,
        event,
        field,
        interface,
        method,
        parameter,
        property,
        runtimeClass,
        struct,
        interfaceImpl,
        all
    }

    export class AttributeUsageAttribute {
        constructor(targets: Windows.Foundation.Metadata.AttributeTargets);
    }

    export class ComposableAttribute {
        constructor(type: string /*System.Type?*/, compositionType: Windows.Foundation.Metadata.CompositionType, version: number);
    }

    enum CompositionType {
        protected,
        public
    }

    export class DefaultAttribute {
        constructor();
    }

    export class DefaultOverloadAttribute {
        constructor();
    }

    export class DualApiPartitionAttribute {
        constructor();
        version: number;
    }

    export class ExclusiveToAttribute {
        constructor(typeName: string /*System.Type?*/);
    }

    enum GCPressureAmount {
        low,
        medium,
        high
    }

    export class GCPressureAttribute {
        constructor();
        amount: Windows.Foundation.Metadata.GCPressureAmount;
    }

    export class GuidAttribute {
        constructor(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number);
    }

    export class HasVariantAttribute {
        constructor();
    }

    export class LengthIsAttribute {
        constructor(indexLengthParameter: number);
    }

    export class MarshalingBehaviorAttribute {
        constructor(behavior: Windows.Foundation.Metadata.MarshalingType);
    }

    enum MarshalingType {
        invalidMarshaling,
        none,
        agile,
        standard
    }

    export class MuseAttribute {
        constructor();
        version: number;
    }

    export class OverloadAttribute {
        constructor(method: string);
    }

    export class OverridableAttribute {
        constructor();
    }

    export class ProtectedAttribute {
        constructor();
    }

    export class RangeAttribute {
        constructor(minValue: number, maxValue: number);
    }

    export class StaticAttribute {
        constructor(type: string /*System.Type?*/, version: number);
    }

    export class ThreadingAttribute {
        constructor(model: Windows.Foundation.Metadata.ThreadingModel);
    }

    enum ThreadingModel {
        invalidThreading,
        sta,
        mta,
        both
    }

    export class VariantAttribute {
        constructor();
    }

    export class VersionAttribute {
        constructor(version: number);
    }

    export class WebHostHiddenAttribute {
        constructor();
    }

}
declare module Windows.System.Display {

    export class DisplayRequest implements Windows.System.Display.IDisplayRequest {
        constructor();
        requestActive(): void;
        requestRelease(): void;
    }

    export interface IDisplayRequest {
        requestActive(): void;
        requestRelease(): void;
    }

}
declare module Windows.System {

    export interface ILauncherOptions {
        contentType: string;
        displayApplicationPicker: boolean;
        fallbackUri: Windows.Foundation.Uri;
        preferredApplicationDisplayName: string;
        preferredApplicationPackageFamilyName: string;
        treatAsUntrusted: boolean;
        ui: Windows.System.LauncherUIOptions;
    }

    export interface ILauncherUIOptions {
        invocationPoint: Windows.Foundation.IReference<Windows.Foundation.Point>;
        preferredPlacement: Windows.UI.Popups.Placement;
        selectionRect: Windows.Foundation.IReference<Windows.Foundation.Rect>;
    }

    export class Launcher {
        static launchFileAsync(file: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncOperation<boolean>;
        static launchFileAsync(file: Windows.Storage.IStorageFile, options: Windows.System.LauncherOptions): Windows.Foundation.IAsyncOperation<boolean>;
        static launchUriAsync(uri: Windows.Foundation.Uri): Windows.Foundation.IAsyncOperation<boolean>;
        static launchUriAsync(uri: Windows.Foundation.Uri, options: Windows.System.LauncherOptions): Windows.Foundation.IAsyncOperation<boolean>;
    }

    export class LauncherOptions implements Windows.System.ILauncherOptions {
        constructor();
        contentType: string;
        displayApplicationPicker: boolean;
        fallbackUri: Windows.Foundation.Uri;
        preferredApplicationDisplayName: string;
        preferredApplicationPackageFamilyName: string;
        treatAsUntrusted: boolean;
        ui: Windows.System.LauncherUIOptions;
    }

    export class LauncherUIOptions implements Windows.System.ILauncherUIOptions {
        invocationPoint: Windows.Foundation.IReference<Windows.Foundation.Point>;
        preferredPlacement: Windows.UI.Popups.Placement;
        selectionRect: Windows.Foundation.IReference<Windows.Foundation.Rect>;
    }

    enum ProcessorArchitecture {
        x86,
        arm,
        x64,
        neutral,
        unknown
    }

    enum VirtualKey {
        none,
        leftButton,
        rightButton,
        cancel,
        middleButton,
        xButton1,
        xButton2,
        back,
        tab,
        clear,
        enter,
        shift,
        control,
        menu,
        pause,
        capitalLock,
        kana,
        hangul,
        junja,
        final,
        hanja,
        kanji,
        escape,
        convert,
        nonConvert,
        accept,
        modeChange,
        space,
        pageUp,
        pageDown,
        end,
        home,
        left,
        up,
        right,
        down,
        select,
        print,
        execute,
        snapshot,
        insert,
        delete,
        help,
        number0,
        number1,
        number2,
        number3,
        number4,
        number5,
        number6,
        number7,
        number8,
        number9,
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u,
        v,
        w,
        x,
        y,
        z,
        leftWindows,
        rightWindows,
        application,
        sleep,
        numberPad0,
        numberPad1,
        numberPad2,
        numberPad3,
        numberPad4,
        numberPad5,
        numberPad6,
        numberPad7,
        numberPad8,
        numberPad9,
        multiply,
        add,
        separator,
        subtract,
        decimal,
        divide,
        f1,
        f2,
        f3,
        f4,
        f5,
        f6,
        f7,
        f8,
        f9,
        f10,
        f11,
        f12,
        f13,
        f14,
        f15,
        f16,
        f17,
        f18,
        f19,
        f20,
        f21,
        f22,
        f23,
        f24,
        numberKeyLock,
        scroll,
        leftShift,
        rightShift,
        leftControl,
        rightControl,
        leftMenu,
        rightMenu
    }

    enum VirtualKeyModifiers {
        none,
        control,
        menu,
        shift,
        windows
    }

}
declare module Windows.System.Profile {

    export class HardwareIdentification {
        static getPackageSpecificToken(nonce: Windows.Storage.Streams.IBuffer): Windows.System.Profile.HardwareToken;
    }

    export class HardwareToken implements Windows.System.Profile.IHardwareToken {
        certificate: Windows.Storage.Streams.IBuffer;
        id: Windows.Storage.Streams.IBuffer;
        signature: Windows.Storage.Streams.IBuffer;
    }

    export interface IHardwareToken {
        certificate: Windows.Storage.Streams.IBuffer;
        id: Windows.Storage.Streams.IBuffer;
        signature: Windows.Storage.Streams.IBuffer;
    }

}
declare module Windows.System.RemoteDesktop {

    export class InteractiveSession {
        static isRemote: boolean;
    }

}
declare module Windows.System.Threading.Core {

    export interface IPreallocatedWorkItem {
        runAsync(): Windows.Foundation.IAsyncAction;
    }

    export interface ISignalNotifier {
        enable(): void;
        terminate(): void;
    }

    export class PreallocatedWorkItem implements Windows.System.Threading.Core.IPreallocatedWorkItem {
        constructor(handler: Windows.System.Threading.WorkItemHandler);
        constructor(handler: Windows.System.Threading.WorkItemHandler, priority: Windows.System.Threading.WorkItemPriority);
        constructor(handler: Windows.System.Threading.WorkItemHandler, priority: Windows.System.Threading.WorkItemPriority, options: Windows.System.Threading.WorkItemOptions);
        runAsync(): Windows.Foundation.IAsyncAction;
    }

    export interface SignalHandler {
        target: Windows.System.Threading.Core.SignalNotifier;
        detail: any[];
        type: string;
    }

    export class SignalNotifier implements Windows.System.Threading.Core.ISignalNotifier {
        enable(): void;
        terminate(): void;
        static attachToEvent(name: string, handler: Windows.System.Threading.Core.SignalHandler): Windows.System.Threading.Core.SignalNotifier;
        static attachToEvent(name: string, handler: Windows.System.Threading.Core.SignalHandler, timeout: Windows.Foundation.TimeSpan): Windows.System.Threading.Core.SignalNotifier;
        static attachToSemaphore(name: string, handler: Windows.System.Threading.Core.SignalHandler): Windows.System.Threading.Core.SignalNotifier;
        static attachToSemaphore(name: string, handler: Windows.System.Threading.Core.SignalHandler, timeout: Windows.Foundation.TimeSpan): Windows.System.Threading.Core.SignalNotifier;
    }

}
declare module Windows.System.Threading {

    export interface IThreadPoolTimer {
        cancel(): void;
        delay: Windows.Foundation.TimeSpan;
        period: Windows.Foundation.TimeSpan;
    }

    export class ThreadPool {
        static runAsync(handler: Windows.System.Threading.WorkItemHandler): Windows.Foundation.IAsyncAction;
        static runAsync(handler: Windows.System.Threading.WorkItemHandler, priority: Windows.System.Threading.WorkItemPriority): Windows.Foundation.IAsyncAction;
        static runAsync(handler: Windows.System.Threading.WorkItemHandler, priority: Windows.System.Threading.WorkItemPriority, options: Windows.System.Threading.WorkItemOptions): Windows.Foundation.IAsyncAction;
    }

    export class ThreadPoolTimer implements Windows.System.Threading.IThreadPoolTimer {
        cancel(): void;
        static createPeriodicTimer(handler: Windows.System.Threading.TimerElapsedHandler, period: Windows.Foundation.TimeSpan): Windows.System.Threading.ThreadPoolTimer;
        static createTimer(handler: Windows.System.Threading.TimerElapsedHandler, delay: Windows.Foundation.TimeSpan): Windows.System.Threading.ThreadPoolTimer;
        static createPeriodicTimer(handler: Windows.System.Threading.TimerElapsedHandler, period: Windows.Foundation.TimeSpan, destroyed: Windows.System.Threading.TimerDestroyedHandler): Windows.System.Threading.ThreadPoolTimer;
        static createTimer(handler: Windows.System.Threading.TimerElapsedHandler, delay: Windows.Foundation.TimeSpan, destroyed: Windows.System.Threading.TimerDestroyedHandler): Windows.System.Threading.ThreadPoolTimer;
        delay: Windows.Foundation.TimeSpan;
        period: Windows.Foundation.TimeSpan;
    }

    export interface TimerDestroyedHandler {
        target: Windows.System.Threading.ThreadPoolTimer;
        detail: any[];
        type: string;
    }

    export interface TimerElapsedHandler {
        target: Windows.System.Threading.ThreadPoolTimer;
        detail: any[];
        type: string;
    }

    export interface WorkItemHandler {
        target: Windows.Foundation.IAsyncAction;
        detail: any[];
        type: string;
    }

    enum WorkItemOptions {
        none,
        timeSliced
    }

    enum WorkItemPriority {
        low,
        normal,
        high
    }

}
declare module Windows.System.UserProfile {

    enum AccountPictureKind {
        smallImage,
        largeImage,
        video
    }

    export class GlobalizationPreferences {
        static calendars: Windows.Foundation.Collections.IVectorView<string>;
        static clocks: Windows.Foundation.Collections.IVectorView<string>;
        static currencies: Windows.Foundation.Collections.IVectorView<string>;
        static homeGeographicRegion: string;
        static languages: Windows.Foundation.Collections.IVectorView<string>;
        static weekStartsOn: Windows.Globalization.DayOfWeek;
    }

    export class LockScreen {
        static getImageStream(): Windows.Storage.Streams.IRandomAccessStream;
        static setImageFileAsync(value: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncAction;
        static setImageStreamAsync(value: Windows.Storage.Streams.IRandomAccessStream): Windows.Foundation.IAsyncAction;
        static originalImageFile: Windows.Foundation.Uri;
    }

    enum SetAccountPictureResult {
        success,
        changeDisabled,
        largeOrDynamicError,
        videoFrameSizeError,
        fileSizeError,
        failure
    }

    export class UserInformation {
        static getAccountPicture(kind: Windows.System.UserProfile.AccountPictureKind): Windows.Storage.IStorageFile;
        static setAccountPictureAsync(image: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncOperation<Windows.System.UserProfile.SetAccountPictureResult>;
        static setAccountPicturesAsync(smallImage: Windows.Storage.IStorageFile, largeImage: Windows.Storage.IStorageFile, video: Windows.Storage.IStorageFile): Windows.Foundation.IAsyncOperation<Windows.System.UserProfile.SetAccountPictureResult>;
        static setAccountPictureFromStreamAsync(image: Windows.Storage.Streams.IRandomAccessStream): Windows.Foundation.IAsyncOperation<Windows.System.UserProfile.SetAccountPictureResult>;
        static setAccountPicturesFromStreamsAsync(smallImage: Windows.Storage.Streams.IRandomAccessStream, largeImage: Windows.Storage.Streams.IRandomAccessStream, video: Windows.Storage.Streams.IRandomAccessStream): Windows.Foundation.IAsyncOperation<Windows.System.UserProfile.SetAccountPictureResult>;
        static getDisplayNameAsync(): Windows.Foundation.IAsyncOperation<string>;
        static getFirstNameAsync(): Windows.Foundation.IAsyncOperation<string>;
        static getLastNameAsync(): Windows.Foundation.IAsyncOperation<string>;
        static getPrincipalNameAsync(): Windows.Foundation.IAsyncOperation<string>;
        static getSessionInitiationProtocolUriAsync(): Windows.Foundation.IAsyncOperation<Windows.Foundation.Uri>;
        static getDomainNameAsync(): Windows.Foundation.IAsyncOperation<string>;
        static accountPictureChangeEnabled: boolean;
        static nameAccessAllowed: boolean;
        // Events
        addEventListener(eventName: string, listener: any): void;
        removeEventListener(eventName: string, listener: any): void;
        addEventListener(eventName: "accountpicturechanged", listener: Windows.Foundation.EventHandler<any>): void;
        removeEventListener(eventName: "accountpicturechanged", listener: Windows.Foundation.EventHandler<any>): void;
        onaccountpicturechanged: (ev: Windows.Foundation.EventHandler<any>) => void;

    }

}

