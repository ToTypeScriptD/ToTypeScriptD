//****************************************************************
//  Generated by:  ToTypeScriptD
//  Website:       http://github.com/ToTypeScriptD/ToTypeScriptD
//  Version:       v0.0.0000.0000 SHA1:0000000 - Debug
//  Date:          mm/dd/YYYY H:MM:SS PM
//
//  Assemblies:
//    ToTypeScriptD.TestAssembly.CSharp.dll
//
//****************************************************************



declare module ToTypeScriptD.TestAssembly.CSharp {

    export interface CollectionTypes {
        integerArray: number[];
        iListOfIntegers: number[];
        listOfIntegers: number[];
        iCollectionOfIntegers: number[];
        collectionOfIntegers: number[];
        iEnumerableOfIntegers: number[];
    }

    export interface CrazyAmountOfNestedClasses {
    }

    export interface CrazyAmountOfNestedClasses_C1 {
    }

    export interface CrazyAmountOfNestedClasses_C1_C2 {
    }

    export interface CrazyAmountOfNestedClasses_C1_C2_C3 {
    }

    export interface CrazyAmountOfNestedClasses_C1_C2_C3_C4 {
    }

    export interface CrazyAmountOfNestedClasses_C1_C2_C3_C4_C5 {
    }

    export interface CrazyAmountOfNestedClasses_C1_C2_C3_C4_C5_WAT {
    }

    export interface GenericClass<T> {
    }

    export interface GenericClassIsGettingALittleCrazy<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterfaceButGeneric3<T>> {
    }

    export interface GenericClassWith<T, K> {
    }

    export interface GenericClassWithConstraint<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface> {
    }

    export interface GenericClassWithMultipleTypesConstrained<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface, K extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface> {
    }

    export interface GenericClassWithOneTypeConstraintMultipleTimes<T extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface /*TODO:, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface1, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface2, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterface3<T,K>*/, K> {
    }

    export interface IAmAnInterface {
        someProperty: string;
        nullableProperty?: number;
    }

    export interface IAmAnotherInterface1 {
    }

    export interface IAmAnotherInterface2 {
    }

    export interface IAmAnotherInterface3<T, K> {
    }

    export interface IAmAnotherInterfaceButGeneric1<T> {
    }

    export interface IAmAnotherInterfaceButGeneric2<T> {
    }

    export interface IAmAnotherInterfaceButGeneric3<T> extends ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterfaceButGeneric1<T>, ToTypeScriptD.TestAssembly.CSharp.IAmAnotherInterfaceButGeneric2<T> {
    }

    export interface SomeClass extends ToTypeScriptD.TestAssembly.CSharp.IAmAnInterface {
        someProperty: string;
        nullableProperty?: number;
    }

    enum SomeClass_NestedEnumValueType {
        a,
        b,
        c
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample.Sample.SubSample {

    export interface TestClassB {
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample.Sample {

    export interface TestClassA {
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample.Sample2 {

    export interface TestClassC {
    }

}
declare module ToTypeScriptD.TestAssembly.CSharp.NamespaceSample {

    export interface TestClass {
    }

}
