declare module WinmdToTypeScript.Native {

    export class Class1 implements WinmdToTypeScript.Native.__IClass1PublicNonVirtuals {
        constructor();
    }

    export class ClassWithEventHandler implements WinmdToTypeScript.Native.__IClassWithEventHandlerPublicNonVirtuals, WinmdToTypeScript.Native.__IClassWithEventHandlerProtectedNonVirtuals {
        addEventListener(type: string, listener: EventListener): void;
        removeEventListener(type: string, listener: EventListener): void;
        onsomethinghappened(ev: any);
        constructor();
        doSomething(): void;
    }

    enum SampleEnum {
        a,
        b,
        c,
        d
    }

    enum SampleEnumNumbered {
        a,
        b,
        c,
        d
    }

    export class SomethingHappenedEventHandler {
        constructor(__param0: System.Object, __param1: System.IntPtr);
        invoke(__param0: WinmdToTypeScript.Native.ClassWithEventHandler, __param1: string): void;
    }

}
